
tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000077a  0000080e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  0080010c  0080010c  0000081a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f50  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000807  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  00002083  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae9  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000391d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 37       	cpi	r26, 0x7E	; 126
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <main>
  9e:	0c 94 bb 03 	jmp	0x776	; 0x776 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <gameOver>:
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
	queue[qcntr++] = *s++;   /*put characters into queue*/
	
	UDR0 = queue[0];  /*send first character to start process*/
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	83 ed       	ldi	r24, 0xD3	; 211
  aa:	90 e3       	ldi	r25, 0x30	; 48
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <gameOver+0x6>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <gameOver+0x10>
  b6:	00 00       	nop
  b8:	e4 e0       	ldi	r30, 0x04	; 4
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	11 92       	st	Z+, r1
  c2:	e8 17       	cp	r30, r24
  c4:	f9 07       	cpc	r31, r25
  c6:	e1 f7       	brne	.-8      	; 0xc0 <gameOver+0x1a>
  c8:	08 95       	ret

000000ca <newBlock>:
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data>
  d2:	81 11       	cpse	r24, r1
  d4:	0e 94 53 00 	call	0xa6	; 0xa6 <gameOver>
  d8:	0e 94 48 03 	call	0x690	; 0x690 <rand>
  dc:	c7 e0       	ldi	r28, 0x07	; 7
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	be 01       	movw	r22, r28
  e2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodhi4>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <blockX>
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <blockY>
  f2:	0e 94 48 03 	call	0x690	; 0x690 <rand>
  f6:	be 01       	movw	r22, r28
  f8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodhi4>
  fc:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <blockType+0x1>
 100:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <blockType>
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <checkRow>:
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	c4 e0       	ldi	r28, 0x04	; 4
 110:	d1 e0       	ldi	r29, 0x01	; 1
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	ae 01       	movw	r20, r28
 116:	88 81       	ld	r24, Y
 118:	8f 3f       	cpi	r24, 0xFF	; 255
 11a:	81 f4       	brne	.+32     	; 0x13c <checkRow+0x32>
 11c:	18 82       	st	Y, r1
 11e:	22 23       	and	r18, r18
 120:	59 f0       	breq	.+22     	; 0x138 <checkRow+0x2e>
 122:	82 2f       	mov	r24, r18
 124:	e8 2f       	mov	r30, r24
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ec 5f       	subi	r30, 0xFC	; 252
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	df 01       	movw	r26, r30
 12e:	11 97       	sbiw	r26, 0x01	; 1
 130:	9c 91       	ld	r25, X
 132:	90 83       	st	Z, r25
 134:	81 50       	subi	r24, 0x01	; 1
 136:	b1 f7       	brne	.-20     	; 0x124 <checkRow+0x1a>
 138:	fa 01       	movw	r30, r20
 13a:	10 82       	st	Z, r1
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	21 96       	adiw	r28, 0x01	; 1
 140:	28 30       	cpi	r18, 0x08	; 8
 142:	49 f7       	brne	.-46     	; 0x116 <checkRow+0xc>
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <clearData>:
 14a:	e4 e0       	ldi	r30, 0x04	; 4
 14c:	f1 e0       	ldi	r31, 0x01	; 1
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	11 92       	st	Z+, r1
 154:	e8 17       	cp	r30, r24
 156:	f9 07       	cpc	r31, r25
 158:	e1 f7       	brne	.-8      	; 0x152 <clearData+0x8>
 15a:	08 95       	ret

0000015c <point>:
 15c:	45 2b       	or	r20, r21
 15e:	89 f0       	breq	.+34     	; 0x182 <point+0x26>
 160:	e6 2f       	mov	r30, r22
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ec 5f       	subi	r30, 0xFC	; 252
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	a9 01       	movw	r20, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <point+0x18>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	8a 95       	dec	r24
 176:	e2 f7       	brpl	.-8      	; 0x170 <point+0x14>
 178:	ca 01       	movw	r24, r20
 17a:	90 81       	ld	r25, Z
 17c:	89 2b       	or	r24, r25
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret
 182:	e6 2f       	mov	r30, r22
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ec 5f       	subi	r30, 0xFC	; 252
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	a9 01       	movw	r20, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <point+0x3a>
 192:	44 0f       	add	r20, r20
 194:	55 1f       	adc	r21, r21
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <point+0x36>
 19a:	ca 01       	movw	r24, r20
 19c:	80 95       	com	r24
 19e:	90 81       	ld	r25, Z
 1a0:	89 23       	and	r24, r25
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <rect>:
 1a6:	7f 92       	push	r7
 1a8:	8f 92       	push	r8
 1aa:	9f 92       	push	r9
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	84 2e       	mov	r8, r20
 1c2:	91 2c       	mov	r9, r1
 1c4:	18 14       	cp	r1, r8
 1c6:	19 04       	cpc	r1, r9
 1c8:	b4 f0       	brlt	.+44     	; 0x1f6 <rect+0x50>
 1ca:	20 c0       	rjmp	.+64     	; 0x20c <rect+0x66>
 1cc:	17 2d       	mov	r17, r7
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	a6 01       	movw	r20, r12
 1d4:	61 2f       	mov	r22, r17
 1d6:	80 2f       	mov	r24, r16
 1d8:	0e 94 ae 00 	call	0x15c	; 0x15c <point>
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	11 50       	subi	r17, 0x01	; 1
 1e0:	ce 15       	cp	r28, r14
 1e2:	df 05       	cpc	r29, r15
 1e4:	b1 f7       	brne	.-20     	; 0x1d2 <rect+0x2c>
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	a8 1a       	sub	r10, r24
 1ea:	b8 0a       	sbc	r11, r24
 1ec:	0f 5f       	subi	r16, 0xFF	; 255
 1ee:	a8 14       	cp	r10, r8
 1f0:	b9 04       	cpc	r11, r9
 1f2:	41 f4       	brne	.+16     	; 0x204 <rect+0x5e>
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <rect+0x66>
 1f6:	68 01       	movw	r12, r16
 1f8:	76 2e       	mov	r7, r22
 1fa:	08 2f       	mov	r16, r24
 1fc:	a1 2c       	mov	r10, r1
 1fe:	b1 2c       	mov	r11, r1
 200:	e2 2e       	mov	r14, r18
 202:	f1 2c       	mov	r15, r1
 204:	1e 14       	cp	r1, r14
 206:	1f 04       	cpc	r1, r15
 208:	0c f3       	brlt	.-62     	; 0x1cc <rect+0x26>
 20a:	ed cf       	rjmp	.-38     	; 0x1e6 <rect+0x40>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	cf 90       	pop	r12
 21c:	bf 90       	pop	r11
 21e:	af 90       	pop	r10
 220:	9f 90       	pop	r9
 222:	8f 90       	pop	r8
 224:	7f 90       	pop	r7
 226:	08 95       	ret

00000228 <drawBlock>:
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	c8 2f       	mov	r28, r24
 236:	d6 2f       	mov	r29, r22
 238:	79 01       	movw	r14, r18
 23a:	42 30       	cpi	r20, 0x02	; 2
 23c:	51 05       	cpc	r21, r1
 23e:	41 f1       	breq	.+80     	; 0x290 <drawBlock+0x68>
 240:	3c f4       	brge	.+14     	; 0x250 <drawBlock+0x28>
 242:	41 15       	cp	r20, r1
 244:	51 05       	cpc	r21, r1
 246:	61 f0       	breq	.+24     	; 0x260 <drawBlock+0x38>
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	51 05       	cpc	r21, r1
 24c:	79 f0       	breq	.+30     	; 0x26c <drawBlock+0x44>
 24e:	35 c0       	rjmp	.+106    	; 0x2ba <drawBlock+0x92>
 250:	44 30       	cpi	r20, 0x04	; 4
 252:	51 05       	cpc	r21, r1
 254:	49 f1       	breq	.+82     	; 0x2a8 <drawBlock+0x80>
 256:	84 f0       	brlt	.+32     	; 0x278 <drawBlock+0x50>
 258:	45 30       	cpi	r20, 0x05	; 5
 25a:	51 05       	cpc	r21, r1
 25c:	59 f1       	breq	.+86     	; 0x2b4 <drawBlock+0x8c>
 25e:	2d c0       	rjmp	.+90     	; 0x2ba <drawBlock+0x92>
 260:	89 01       	movw	r16, r18
 262:	23 e0       	ldi	r18, 0x03	; 3
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <rect>
 26a:	27 c0       	rjmp	.+78     	; 0x2ba <drawBlock+0x92>
 26c:	89 01       	movw	r16, r18
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	43 e0       	ldi	r20, 0x03	; 3
 272:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <rect>
 276:	21 c0       	rjmp	.+66     	; 0x2ba <drawBlock+0x92>
 278:	89 01       	movw	r16, r18
 27a:	22 e0       	ldi	r18, 0x02	; 2
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <rect>
 282:	a7 01       	movw	r20, r14
 284:	6d 2f       	mov	r22, r29
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	8c 0f       	add	r24, r28
 28a:	0e 94 ae 00 	call	0x15c	; 0x15c <point>
 28e:	15 c0       	rjmp	.+42     	; 0x2ba <drawBlock+0x92>
 290:	89 01       	movw	r16, r18
 292:	22 e0       	ldi	r18, 0x02	; 2
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <rect>
 29a:	a7 01       	movw	r20, r14
 29c:	6d 2f       	mov	r22, r29
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	8c 0f       	add	r24, r28
 2a2:	0e 94 ae 00 	call	0x15c	; 0x15c <point>
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <drawBlock+0x92>
 2a8:	89 01       	movw	r16, r18
 2aa:	22 e0       	ldi	r18, 0x02	; 2
 2ac:	42 e0       	ldi	r20, 0x02	; 2
 2ae:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <rect>
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <drawBlock+0x92>
 2b4:	a9 01       	movw	r20, r18
 2b6:	0e 94 ae 00 	call	0x15c	; 0x15c <point>
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	08 95       	ret

000002c8 <moveBlock>:
 2c8:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <blockY>
 2cc:	6f 5f       	subi	r22, 0xFF	; 255
 2ce:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <blockY>
 2d2:	40 91 7c 01 	lds	r20, 0x017C	; 0x80017c <blockType>
 2d6:	50 91 7d 01 	lds	r21, 0x017D	; 0x80017d <blockType+0x1>
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <blockX>
 2e2:	0e 94 14 01 	call	0x228	; 0x228 <drawBlock>
 2e6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <blockY>
 2ea:	87 30       	cpi	r24, 0x07	; 7
 2ec:	10 f0       	brcs	.+4      	; 0x2f2 <moveBlock+0x2a>
 2ee:	0e 94 65 00 	call	0xca	; 0xca <newBlock>
 2f2:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <blockY>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ec 5f       	subi	r30, 0xFC	; 252
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	81 81       	ldd	r24, Z+1	; 0x01
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	00 90 75 01 	lds	r0, 0x0175	; 0x800175 <blockX>
 304:	02 c0       	rjmp	.+4      	; 0x30a <moveBlock+0x42>
 306:	95 95       	asr	r25
 308:	87 95       	ror	r24
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <moveBlock+0x3e>
 30e:	80 fd       	sbrc	r24, 0
 310:	0e 94 65 00 	call	0xca	; 0xca <newBlock>
 314:	08 95       	ret

00000316 <shiftOut>:
 316:	9b b1       	in	r25, 0x0b	; 11
 318:	9f 76       	andi	r25, 0x6F	; 111
 31a:	9b b9       	out	0x0b, r25	; 11
 31c:	90 e9       	ldi	r25, 0x90	; 144
 31e:	9a 95       	dec	r25
 320:	f1 f7       	brne	.-4      	; 0x31e <shiftOut+0x8>
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	e8 2f       	mov	r30, r24
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	5c 98       	cbi	0x0b, 4	; 11
 32c:	80 e9       	ldi	r24, 0x90	; 144
 32e:	8a 95       	dec	r24
 330:	f1 f7       	brne	.-4      	; 0x32e <shiftOut+0x18>
 332:	4b b1       	in	r20, 0x0b	; 11
 334:	bf 01       	movw	r22, r30
 336:	02 2e       	mov	r0, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <shiftOut+0x28>
 33a:	75 95       	asr	r23
 33c:	67 95       	ror	r22
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <shiftOut+0x24>
 342:	96 2f       	mov	r25, r22
 344:	97 95       	ror	r25
 346:	99 27       	eor	r25, r25
 348:	97 95       	ror	r25
 34a:	94 2b       	or	r25, r20
 34c:	9b b9       	out	0x0b, r25	; 11
 34e:	90 e9       	ldi	r25, 0x90	; 144
 350:	9a 95       	dec	r25
 352:	f1 f7       	brne	.-4      	; 0x350 <shiftOut+0x3a>
 354:	5c 9a       	sbi	0x0b, 4	; 11
 356:	80 e9       	ldi	r24, 0x90	; 144
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <shiftOut+0x42>
 35c:	5f 98       	cbi	0x0b, 7	; 11
 35e:	90 e9       	ldi	r25, 0x90	; 144
 360:	9a 95       	dec	r25
 362:	f1 f7       	brne	.-4      	; 0x360 <shiftOut+0x4a>
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	28 30       	cpi	r18, 0x08	; 8
 36a:	31 05       	cpc	r19, r1
 36c:	f1 f6       	brne	.-68     	; 0x32a <shiftOut+0x14>
 36e:	5c 98       	cbi	0x0b, 4	; 11
 370:	80 e9       	ldi	r24, 0x90	; 144
 372:	8a 95       	dec	r24
 374:	f1 f7       	brne	.-4      	; 0x372 <shiftOut+0x5c>
 376:	08 95       	ret

00000378 <drawData>:
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	8c 01       	movw	r16, r24
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d0 e0       	ldi	r29, 0x00	; 0
 38a:	ee 24       	eor	r14, r14
 38c:	e3 94       	inc	r14
 38e:	f1 2c       	mov	r15, r1
 390:	5a 98       	cbi	0x0b, 2	; 11
 392:	20 e9       	ldi	r18, 0x90	; 144
 394:	2a 95       	dec	r18
 396:	f1 f7       	brne	.-4      	; 0x394 <drawData+0x1c>
 398:	c7 01       	movw	r24, r14
 39a:	0c 2e       	mov	r0, r28
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <drawData+0x2a>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <drawData+0x26>
 3a6:	80 95       	com	r24
 3a8:	0e 94 8b 01 	call	0x316	; 0x316 <shiftOut>
 3ac:	f8 01       	movw	r30, r16
 3ae:	81 91       	ld	r24, Z+
 3b0:	8f 01       	movw	r16, r30
 3b2:	0e 94 8b 01 	call	0x316	; 0x316 <shiftOut>
 3b6:	5a 9a       	sbi	0x0b, 2	; 11
 3b8:	f0 e9       	ldi	r31, 0x90	; 144
 3ba:	fa 95       	dec	r31
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <drawData+0x42>
 3be:	21 96       	adiw	r28, 0x01	; 1
 3c0:	c8 30       	cpi	r28, 0x08	; 8
 3c2:	d1 05       	cpc	r29, r1
 3c4:	29 f7       	brne	.-54     	; 0x390 <drawData+0x18>
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	08 95       	ret

000003d4 <__vector_20>:

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/

ISR(USART_TX_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	8f 93       	push	r24
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
	/*send next character and increment index*/
	if (qcntr != sndcntr)
 3e4:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 3e8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <qcntr>
 3ec:	8e 17       	cp	r24, r30
 3ee:	51 f0       	breq	.+20     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	UDR0 = queue[sndcntr++];
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	8e 0f       	add	r24, r30
 3f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	e2 5f       	subi	r30, 0xF2	; 242
 3fc:	fe 4f       	sbci	r31, 0xFE	; 254
 3fe:	80 81       	ld	r24, Z
 400:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	8f 91       	pop	r24
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <__vector_16>:

ISR(TIMER0_OVF_vect) { //overflow every 16ms
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
	refreshFlag = 1; // Call for updating screen
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <refreshFlag+0x1>
 42e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <refreshFlag>
	TCNT0 = 6; // 256-250 = 6
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	86 bd       	out	0x26, r24	; 38
	++updateTimeCount;
 436:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <updateTimeCount>
 43a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <updateTimeCount+0x1>
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <updateTimeCount+0x1>
 444:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <updateTimeCount>
	if(updateTimeCount >= updateDelay) { //after 208ms, update game state
 448:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <updateTimeCount>
 44c:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <updateTimeCount+0x1>
 450:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <updateDelay>
 454:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <updateDelay+0x1>
 458:	28 17       	cp	r18, r24
 45a:	39 07       	cpc	r19, r25
 45c:	54 f0       	brlt	.+20     	; 0x472 <__vector_16+0x5e>
		updateFlag = 1; // Call for updating game
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <updateFlag+0x1>
 466:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <updateFlag>
		updateTimeCount = 0;
 46a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <updateTimeCount+0x1>
 46e:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <updateTimeCount>
	}
}
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	3f 91       	pop	r19
 478:	2f 91       	pop	r18
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <init_ports>:

void init_ports() {
	DDRC = 0; //all pins are input
 484:	17 b8       	out	0x07, r1	; 7
	PORTC = (1<<rightInputPin) | (1<<leftInputPin); //enable pullup resistors
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	88 b9       	out	0x08, r24	; 8
	
	DDRD = (1<<latchPin) | (1<<clockPin) | (1<<dataPin); //enable pins as output
 48a:	84 e9       	ldi	r24, 0x94	; 148
 48c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0; //set all pins low
 48e:	1b b8       	out	0x0b, r1	; 11
 490:	08 95       	ret

00000492 <init_USART>:
}
void init_USART() {
	UCSR0B = (1<<TXEN0) | (1<<TXCIE0); //enable transmitter and tx interrupt
 492:	88 e4       	ldi	r24, 0x48	; 72
 494:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0 = 103; //baud 9600
 498:	87 e6       	ldi	r24, 0x67	; 103
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 4a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 4a4:	08 95       	ret

000004a6 <init_timer0>:
}
void init_timer0() { //16Mhz/1024 = 15625Hz = 0.064ms
	
	TCCR0A = 0;
 4a6:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = (1<<TOIE0);	// enable interrupt
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (5<<CS00); // prescalar 1024
 4ae:	85 e0       	ldi	r24, 0x05	; 5
 4b0:	85 bd       	out	0x25, r24	; 37
	// For refresh rate of 62.5Hz, 16ms /0.064ms = 250
	TCNT0 = 6; // 256-250 = 6
 4b2:	86 e0       	ldi	r24, 0x06	; 6
 4b4:	86 bd       	out	0x26, r24	; 38
 4b6:	08 95       	ret

000004b8 <main>:
uint8_t blockY;
int blockType;
char msg[6] = "hello";

int main(void) {
	init_USART();// Serial for debugging purposes
 4b8:	0e 94 49 02 	call	0x492	; 0x492 <init_USART>
	init_ports();
 4bc:	0e 94 42 02 	call	0x484	; 0x484 <init_ports>
	init_timer0();
 4c0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <init_timer0>
	clearData();
 4c4:	0e 94 a5 00 	call	0x14a	; 0x14a <clearData>
	newBlock();
 4c8:	0e 94 65 00 	call	0xca	; 0xca <newBlock>
	
	sei();
 4cc:	78 94       	sei
	updateTimeCount = 0;
 4ce:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <updateTimeCount+0x1>
 4d2:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <updateTimeCount>
	updateDelay = 35; // 35* 16ms = 560ms. Not a definition because we may want to potentially change it
 4d6:	83 e2       	ldi	r24, 0x23	; 35
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <updateDelay+0x1>
 4de:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <updateDelay>
	updateFlag = 0;
 4e2:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <updateFlag+0x1>
 4e6:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <updateFlag>
	refreshFlag = 0;
 4ea:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <refreshFlag+0x1>
 4ee:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <refreshFlag>
	while (1) {
		/********************************************************************************/
		/* Game update loop																*/
		/********************************************************************************/

		if(updateFlag) {
 4f2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <updateFlag>
 4f6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <updateFlag+0x1>
 4fa:	89 2b       	or	r24, r25
 4fc:	09 f4       	brne	.+2      	; 0x500 <main+0x48>
 4fe:	44 c0       	rjmp	.+136    	; 0x588 <main+0xd0>
			checkRow();
 500:	0e 94 85 00 	call	0x10a	; 0x10a <checkRow>
			drawBlock(blockX,blockY,blockType, 0); //clear old position
 504:	40 91 7c 01 	lds	r20, 0x017C	; 0x80017c <blockType>
 508:	50 91 7d 01 	lds	r21, 0x017D	; 0x80017d <blockType+0x1>
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <blockY>
 514:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <blockX>
 518:	0e 94 14 01 	call	0x228	; 0x228 <drawBlock>
			if((PINC & (1<<rightInputPin)) == 0) { //move block right
 51c:	31 99       	sbic	0x06, 1	; 6
 51e:	16 c0       	rjmp	.+44     	; 0x54c <main+0x94>
				if((blockX < 7) && !(data[blockY]&(1<<(blockX+1)))) {
 520:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <blockX>
 524:	87 30       	cpi	r24, 0x07	; 7
 526:	90 f4       	brcc	.+36     	; 0x54c <main+0x94>
 528:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <blockY>
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ec 5f       	subi	r30, 0xFC	; 252
 530:	fe 4f       	sbci	r31, 0xFE	; 254
 532:	20 81       	ld	r18, Z
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	98 0f       	add	r25, r24
 53a:	09 2e       	mov	r0, r25
 53c:	02 c0       	rjmp	.+4      	; 0x542 <main+0x8a>
 53e:	35 95       	asr	r19
 540:	27 95       	ror	r18
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <main+0x86>
 546:	20 ff       	sbrs	r18, 0
					blockX++;
 548:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <blockX>
				}
			}
			if((PINC & (1<<leftInputPin)) == 0) { //move block left
 54c:	30 99       	sbic	0x06, 0	; 6
 54e:	16 c0       	rjmp	.+44     	; 0x57c <main+0xc4>
				if((blockX > 0) && !(data[blockY]&(1<<(blockX-1)))) {
 550:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <blockX>
 554:	88 23       	and	r24, r24
 556:	91 f0       	breq	.+36     	; 0x57c <main+0xc4>
 558:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <blockY>
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	ec 5f       	subi	r30, 0xFC	; 252
 560:	fe 4f       	sbci	r31, 0xFE	; 254
 562:	20 81       	ld	r18, Z
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	9f ef       	ldi	r25, 0xFF	; 255
 568:	98 0f       	add	r25, r24
 56a:	09 2e       	mov	r0, r25
 56c:	02 c0       	rjmp	.+4      	; 0x572 <main+0xba>
 56e:	35 95       	asr	r19
 570:	27 95       	ror	r18
 572:	0a 94       	dec	r0
 574:	e2 f7       	brpl	.-8      	; 0x56e <main+0xb6>
 576:	20 ff       	sbrs	r18, 0
					blockX--;
 578:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <blockX>
				}
			}
			moveBlock();
 57c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <moveBlock>
			updateFlag = 0;
 580:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <updateFlag+0x1>
 584:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <updateFlag>
		}
		
		/********************************************************************************/
		/* Display update loop. Every 16ms												*/
		/********************************************************************************/
		if(refreshFlag) {
 588:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <refreshFlag>
 58c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <refreshFlag+0x1>
 590:	89 2b       	or	r24, r25
 592:	09 f4       	brne	.+2      	; 0x596 <main+0xde>
 594:	ae cf       	rjmp	.-164    	; 0x4f2 <main+0x3a>
			drawData(data);
 596:	84 e0       	ldi	r24, 0x04	; 4
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 bc 01 	call	0x378	; 0x378 <drawData>
			refreshFlag = 0;
 59e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <refreshFlag+0x1>
 5a2:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <refreshFlag>
 5a6:	a5 cf       	rjmp	.-182    	; 0x4f2 <main+0x3a>

000005a8 <__divmodhi4>:
 5a8:	97 fb       	bst	r25, 7
 5aa:	07 2e       	mov	r0, r23
 5ac:	16 f4       	brtc	.+4      	; 0x5b2 <__divmodhi4+0xa>
 5ae:	00 94       	com	r0
 5b0:	07 d0       	rcall	.+14     	; 0x5c0 <__divmodhi4_neg1>
 5b2:	77 fd       	sbrc	r23, 7
 5b4:	09 d0       	rcall	.+18     	; 0x5c8 <__divmodhi4_neg2>
 5b6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__udivmodhi4>
 5ba:	07 fc       	sbrc	r0, 7
 5bc:	05 d0       	rcall	.+10     	; 0x5c8 <__divmodhi4_neg2>
 5be:	3e f4       	brtc	.+14     	; 0x5ce <__divmodhi4_exit>

000005c0 <__divmodhi4_neg1>:
 5c0:	90 95       	com	r25
 5c2:	81 95       	neg	r24
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	08 95       	ret

000005c8 <__divmodhi4_neg2>:
 5c8:	70 95       	com	r23
 5ca:	61 95       	neg	r22
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255

000005ce <__divmodhi4_exit>:
 5ce:	08 95       	ret

000005d0 <__udivmodhi4>:
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	51 e1       	ldi	r21, 0x11	; 17
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <__udivmodhi4_ep>

000005d8 <__udivmodhi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	a6 17       	cp	r26, r22
 5de:	b7 07       	cpc	r27, r23
 5e0:	10 f0       	brcs	.+4      	; 0x5e6 <__udivmodhi4_ep>
 5e2:	a6 1b       	sub	r26, r22
 5e4:	b7 0b       	sbc	r27, r23

000005e6 <__udivmodhi4_ep>:
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	5a 95       	dec	r21
 5ec:	a9 f7       	brne	.-22     	; 0x5d8 <__udivmodhi4_loop>
 5ee:	80 95       	com	r24
 5f0:	90 95       	com	r25
 5f2:	bc 01       	movw	r22, r24
 5f4:	cd 01       	movw	r24, r26
 5f6:	08 95       	ret

000005f8 <do_rand>:
 5f8:	8f 92       	push	r8
 5fa:	9f 92       	push	r9
 5fc:	af 92       	push	r10
 5fe:	bf 92       	push	r11
 600:	cf 92       	push	r12
 602:	df 92       	push	r13
 604:	ef 92       	push	r14
 606:	ff 92       	push	r15
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	ec 01       	movw	r28, r24
 60e:	68 81       	ld	r22, Y
 610:	79 81       	ldd	r23, Y+1	; 0x01
 612:	8a 81       	ldd	r24, Y+2	; 0x02
 614:	9b 81       	ldd	r25, Y+3	; 0x03
 616:	61 15       	cp	r22, r1
 618:	71 05       	cpc	r23, r1
 61a:	81 05       	cpc	r24, r1
 61c:	91 05       	cpc	r25, r1
 61e:	21 f4       	brne	.+8      	; 0x628 <do_rand+0x30>
 620:	64 e2       	ldi	r22, 0x24	; 36
 622:	79 ed       	ldi	r23, 0xD9	; 217
 624:	8b e5       	ldi	r24, 0x5B	; 91
 626:	97 e0       	ldi	r25, 0x07	; 7
 628:	2d e1       	ldi	r18, 0x1D	; 29
 62a:	33 ef       	ldi	r19, 0xF3	; 243
 62c:	41 e0       	ldi	r20, 0x01	; 1
 62e:	50 e0       	ldi	r21, 0x00	; 0
 630:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodsi4>
 634:	49 01       	movw	r8, r18
 636:	5a 01       	movw	r10, r20
 638:	9b 01       	movw	r18, r22
 63a:	ac 01       	movw	r20, r24
 63c:	a7 ea       	ldi	r26, 0xA7	; 167
 63e:	b1 e4       	ldi	r27, 0x41	; 65
 640:	0e 94 77 03 	call	0x6ee	; 0x6ee <__muluhisi3>
 644:	6b 01       	movw	r12, r22
 646:	7c 01       	movw	r14, r24
 648:	ac ee       	ldi	r26, 0xEC	; 236
 64a:	b4 ef       	ldi	r27, 0xF4	; 244
 64c:	a5 01       	movw	r20, r10
 64e:	94 01       	movw	r18, r8
 650:	0e 94 85 03 	call	0x70a	; 0x70a <__mulohisi3>
 654:	dc 01       	movw	r26, r24
 656:	cb 01       	movw	r24, r22
 658:	8c 0d       	add	r24, r12
 65a:	9d 1d       	adc	r25, r13
 65c:	ae 1d       	adc	r26, r14
 65e:	bf 1d       	adc	r27, r15
 660:	b7 ff       	sbrs	r27, 7
 662:	03 c0       	rjmp	.+6      	; 0x66a <do_rand+0x72>
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	a1 09       	sbc	r26, r1
 668:	b0 48       	sbci	r27, 0x80	; 128
 66a:	88 83       	st	Y, r24
 66c:	99 83       	std	Y+1, r25	; 0x01
 66e:	aa 83       	std	Y+2, r26	; 0x02
 670:	bb 83       	std	Y+3, r27	; 0x03
 672:	9f 77       	andi	r25, 0x7F	; 127
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	ff 90       	pop	r15
 67a:	ef 90       	pop	r14
 67c:	df 90       	pop	r13
 67e:	cf 90       	pop	r12
 680:	bf 90       	pop	r11
 682:	af 90       	pop	r10
 684:	9f 90       	pop	r9
 686:	8f 90       	pop	r8
 688:	08 95       	ret

0000068a <rand_r>:
 68a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <do_rand>
 68e:	08 95       	ret

00000690 <rand>:
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	91 e0       	ldi	r25, 0x01	; 1
 694:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <do_rand>
 698:	08 95       	ret

0000069a <srand>:
 69a:	a0 e0       	ldi	r26, 0x00	; 0
 69c:	b0 e0       	ldi	r27, 0x00	; 0
 69e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 6a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 6a6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 6aa:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 6ae:	08 95       	ret

000006b0 <__divmodsi4>:
 6b0:	05 2e       	mov	r0, r21
 6b2:	97 fb       	bst	r25, 7
 6b4:	1e f4       	brtc	.+6      	; 0x6bc <__divmodsi4+0xc>
 6b6:	00 94       	com	r0
 6b8:	0e 94 6f 03 	call	0x6de	; 0x6de <__negsi2>
 6bc:	57 fd       	sbrc	r21, 7
 6be:	07 d0       	rcall	.+14     	; 0x6ce <__divmodsi4_neg2>
 6c0:	0e 94 8a 03 	call	0x714	; 0x714 <__udivmodsi4>
 6c4:	07 fc       	sbrc	r0, 7
 6c6:	03 d0       	rcall	.+6      	; 0x6ce <__divmodsi4_neg2>
 6c8:	4e f4       	brtc	.+18     	; 0x6dc <__divmodsi4_exit>
 6ca:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__negsi2>

000006ce <__divmodsi4_neg2>:
 6ce:	50 95       	com	r21
 6d0:	40 95       	com	r20
 6d2:	30 95       	com	r19
 6d4:	21 95       	neg	r18
 6d6:	3f 4f       	sbci	r19, 0xFF	; 255
 6d8:	4f 4f       	sbci	r20, 0xFF	; 255
 6da:	5f 4f       	sbci	r21, 0xFF	; 255

000006dc <__divmodsi4_exit>:
 6dc:	08 95       	ret

000006de <__negsi2>:
 6de:	90 95       	com	r25
 6e0:	80 95       	com	r24
 6e2:	70 95       	com	r23
 6e4:	61 95       	neg	r22
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	08 95       	ret

000006ee <__muluhisi3>:
 6ee:	0e 94 ac 03 	call	0x758	; 0x758 <__umulhisi3>
 6f2:	a5 9f       	mul	r26, r21
 6f4:	90 0d       	add	r25, r0
 6f6:	b4 9f       	mul	r27, r20
 6f8:	90 0d       	add	r25, r0
 6fa:	a4 9f       	mul	r26, r20
 6fc:	80 0d       	add	r24, r0
 6fe:	91 1d       	adc	r25, r1
 700:	11 24       	eor	r1, r1
 702:	08 95       	ret

00000704 <__mulshisi3>:
 704:	b7 ff       	sbrs	r27, 7
 706:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__muluhisi3>

0000070a <__mulohisi3>:
 70a:	0e 94 77 03 	call	0x6ee	; 0x6ee <__muluhisi3>
 70e:	82 1b       	sub	r24, r18
 710:	93 0b       	sbc	r25, r19
 712:	08 95       	ret

00000714 <__udivmodsi4>:
 714:	a1 e2       	ldi	r26, 0x21	; 33
 716:	1a 2e       	mov	r1, r26
 718:	aa 1b       	sub	r26, r26
 71a:	bb 1b       	sub	r27, r27
 71c:	fd 01       	movw	r30, r26
 71e:	0d c0       	rjmp	.+26     	; 0x73a <__udivmodsi4_ep>

00000720 <__udivmodsi4_loop>:
 720:	aa 1f       	adc	r26, r26
 722:	bb 1f       	adc	r27, r27
 724:	ee 1f       	adc	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	a2 17       	cp	r26, r18
 72a:	b3 07       	cpc	r27, r19
 72c:	e4 07       	cpc	r30, r20
 72e:	f5 07       	cpc	r31, r21
 730:	20 f0       	brcs	.+8      	; 0x73a <__udivmodsi4_ep>
 732:	a2 1b       	sub	r26, r18
 734:	b3 0b       	sbc	r27, r19
 736:	e4 0b       	sbc	r30, r20
 738:	f5 0b       	sbc	r31, r21

0000073a <__udivmodsi4_ep>:
 73a:	66 1f       	adc	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	88 1f       	adc	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	1a 94       	dec	r1
 744:	69 f7       	brne	.-38     	; 0x720 <__udivmodsi4_loop>
 746:	60 95       	com	r22
 748:	70 95       	com	r23
 74a:	80 95       	com	r24
 74c:	90 95       	com	r25
 74e:	9b 01       	movw	r18, r22
 750:	ac 01       	movw	r20, r24
 752:	bd 01       	movw	r22, r26
 754:	cf 01       	movw	r24, r30
 756:	08 95       	ret

00000758 <__umulhisi3>:
 758:	a2 9f       	mul	r26, r18
 75a:	b0 01       	movw	r22, r0
 75c:	b3 9f       	mul	r27, r19
 75e:	c0 01       	movw	r24, r0
 760:	a3 9f       	mul	r26, r19
 762:	70 0d       	add	r23, r0
 764:	81 1d       	adc	r24, r1
 766:	11 24       	eor	r1, r1
 768:	91 1d       	adc	r25, r1
 76a:	b2 9f       	mul	r27, r18
 76c:	70 0d       	add	r23, r0
 76e:	81 1d       	adc	r24, r1
 770:	11 24       	eor	r1, r1
 772:	91 1d       	adc	r25, r1
 774:	08 95       	ret

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>
